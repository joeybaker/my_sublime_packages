var MapGenerator = require('./map-generator');

// Object with processed CSS
var Result = (function(){var DP$0 = Object.defineProperty;"use strict";
    function Result(root) {var opts = arguments[1];if(opts === void 0)opts = { };
        this.root = root;
        this.opts = opts;
    }Object.defineProperties(Result.prototype, {map: {"get": map$get$0, "configurable": true, "enumerable": true}, css: {"get": css$get$0, "configurable": true, "enumerable": true}});DP$0(Result, "prototype", {"configurable": false, "enumerable": false, "writable": false});

    // Lazy method to return source map
    function map$get$0() {
        if ( !this.cssCached ) this.stringify();
        return this.mapCached;
    }

    // Lazy method to return CSS string
    function css$get$0() {
        if ( !this.cssCached ) this.stringify();
        return this.cssCached;
    }

    // Return CSS string on any try to print
    Result.prototype.toString = function() {
        return this.css;
    }

    // Generate CSS and map
    Result.prototype.stringify = function() {
        var map = new MapGenerator(this.root, this.opts);
        var generated  = map.generate();
        this.cssCached = generated[0];
        this.mapCached = generated[1];
    }
;return Result;})();

module.exports = Result;
