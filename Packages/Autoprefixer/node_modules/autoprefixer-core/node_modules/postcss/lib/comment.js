var Node = require('./node');

// CSS comment between declarations or rules
var Comment = (function(super$0){"use strict";var DP$0 = Object.defineProperty;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,Object.getOwnPropertyDescriptor(s,p));}}return t};MIXIN$0(Comment, super$0);var $proto$0={};
    function Comment(defaults) {
        this.type = 'comment';
        super$0.call(this, defaults);
    }Comment.prototype = Object.create(super$0.prototype, {"constructor": {"value": Comment, "configurable": true, "writable": true} });DP$0(Comment, "prototype", {"configurable": false, "enumerable": false, "writable": false});

    // Default spaces for new node
    $proto$0.defaultStyle = function() {
       return { left: ' ', right: ' ' };
    };

    // Stringify declaration
    $proto$0.stringify = function(builder) {
        var style = this.style();
        if ( this.before ) builder(this.before);
        builder('/*' + style.left + this.text + style.right + '*/', this);
    };
MIXIN$0(Comment.prototype,$proto$0);$proto$0=void 0;return Comment;})(Node);

module.exports = Comment;
