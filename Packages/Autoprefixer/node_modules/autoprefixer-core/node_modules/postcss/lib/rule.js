var Container   = require('./container');
var Declaration = require('./declaration');
var list        = require('./list');

// CSS rule like “a { }”
var Rule = (function(super$0){var DP$0 = Object.defineProperty;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,Object.getOwnPropertyDescriptor(s,p));}}return t};"use strict";MIXIN$0(Rule, super$0);
    function Rule(defaults) {
        this.type = 'rule';
        super$0.call(this, defaults);
    }Rule.prototype = Object.create(super$0.prototype, {"constructor": {"value": Rule, "configurable": true, "writable": true}, selectors: {"get": selectors$get$0, "set": selectors$set$0, "configurable": true, "enumerable": true} });DP$0(Rule, "prototype", {"configurable": false, "enumerable": false, "writable": false});

    // Different style for empty and non-empty rules
    Rule.prototype.styleType = function() {
        return this.type + (this.decls.length ? '-body' : '-empty');
    }

    Rule.prototype.defaultStyle = function(type) {
        if ( type == 'rule-body' ) {
            return { between: ' ', after: this.defaultAfter() };
        } else {
            return { between: ' ', after: '' };
        }
    }

    // Shortcut to get selectors as array

    function selectors$get$0() {
        return list.comma(this.selector);
    }

    function selectors$set$0(values) {
        this.selector = values.join(', ');
    }

    // Stringify rule
    Rule.prototype.stringify = function(builder) {
        this.stringifyBlock(builder,
            this.stringifyRaw('selector') + this.style().between + '{');
    }
;return Rule;})(Container.WithDecls);

module.exports = Rule;
