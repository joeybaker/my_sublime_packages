# [PackageDev] target_format: plist, ext: tmLanguage
name: JavaScript (Babel)
scopeName: source.js
fileTypes: [js, jsx, babel, es6]
firstLineMatch: ^#!\s*/.*\b(node|js)$\n?

patterns:
- include: '#core'

repository:
  core:
    patterns:
    - include: '#literal-function-labels'
    - include: '#literal-arrow-function-labels'
    - include: '#literal-labels'

    - include: '#literal-for'
    - include: '#literal-switch'

    - include: '#expression'
    - include: '#literal-punctuation'

  expression:
    patterns:
    - include: '#literal-regexp'              # before operators and keywords to avoid ambiguities

    - include: '#literal-jsx'
    - include: '#es7-decorators'

    - include: '#support'
    - include: '#literal-function'
    - include: '#literal-arrow-function'
    - include: '#literal-prototype'           # after literal-function, which includes some prototype strings

    - include: '#literal-keywords'
    - include: '#literal-number'
    - include: '#literal-template-string'
    - include: '#literal-string'
    - include: '#literal-language-constant'
    - include: '#literal-language-variable'

    - include: '#literal-method'
    - include: '#literal-module'
    - include: '#literal-class'

    - include: '#literal-constructor'
    - include: '#literal-method-call'
    - include: '#literal-function-call'

    - include: '#comments'
    - include: '#brackets'

    - include: '#literal-operators'
    - include: '#literal-variable'

  round-brackets:
    patterns:
    - name: meta.group.braces.round.js
      begin: \(
      end: \)
      captures:
        '0': {name: meta.brace.round.js}
      patterns:
      - include: '#expression'

  square-brackets:
    patterns:
    - name: meta.group.braces.square.js
      begin: \[
      end: \]
      captures:
        '0': {name: meta.brace.square.js}
      patterns:
      - include: '#expression'

  curly-brackets:
    patterns:
    - name: meta.group.braces.curly.js
      begin: \{
      end: \}
      captures:
        '0': {name: meta.brace.curly.js}
      patterns:
      - include: $self

  brackets:
    patterns:
    - include: '#round-brackets'
    - include: '#square-brackets'
    - include: '#curly-brackets'

  comments:
    patterns:
    - name: comment.block.js
      begin: /\*
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.js}

    - name: comment.block.html.js
      match: (<!--|-->)
      captures:
        '0': {name: punctuation.definition.comment.js}

    - name: comment.line.double-slash.js
      match: (//).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.js}

    - name: comment.line.shebang.js
      match: ^(#!).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.js}

  function-declaration-parameters:
    patterns:
    - begin: \(
      beginCaptures:
        '0': {name: punctuation.definition.parameters.begin.js}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.parameters.end.js}
      patterns:
      - name: keyword.operator.spread.js
        match: (?<!\.)\.\.\.
      - name: variable.parameter.function.js
        match: '[_$a-zA-Z][$\w]*'
      - name: punctuation.separator.parameter.function.js
        match: ','
      - name: meta.parameter.optional.js
        begin: '='
        beginCaptures:
          '0': {name: keyword.operator.assignment.js}
        end: '(?=[,)])'
        patterns:
        - include: '#expression'
      - include: '#comments'

  literal-module:
    patterns:
    - name: keyword.operator.module.js
      match: (?<!\.)\b(?>import|export|default|from|as)\b

  literal-class:
    patterns:
    # e.g. class MyClass {  }
    - name: meta.class.js
      begin: (?<!\.)\b(class)\s+([_$a-zA-Z][$\w]*)
      beginCaptures:
        '1': {name: storage.type.class.js}
        '2': {name: entity.name.class.js}
      end: \}
      endCaptures:
        '0': {name: meta.brace.curly.js}
      patterns:
      - name: meta.class.extends.js
        begin: (?<!\.)\b(extends)\b
        beginCaptures:
          '0': {name: storage.type.extends.js}
        end: (?={)
        patterns:
        - include: '#expression'

      - begin: \{
        beginCaptures:
          '0': {name: meta.brace.curly.js}
        end: (?=})
        patterns:
        - include: '#brackets'
        - include: '#es7-decorators'
        - include: '#es7-class-properties'
        - include: '#literal-method'
        - include: '#comments'

    - name: storage.type.class.js
      match: (?<!\.)\b(class)\b

  literal-method:
    patterns:
    # e.g. play(arg1, arg2) {  }
    - name: meta.method.js
      begin: >-
        (?x)
          (?:\b(static)\s+)?
          (?:\b(async)\s+)?
          (?:(\*)\s*)?([_$a-zA-Z][$\w]*)\s*
          (?=\([^())]*\)(?:\s|/\*.*\*/)*\{)
      beginCaptures:
        '1': {name: storage.type.js}
        '2': {name: storage.type.js}
        '3': {name: keyword.generator.asterisk.js}
        '4': {name: entity.name.function.js}
      end: (?<=\))
      patterns:
      - include: '#function-declaration-parameters'

    # getter/setter
    - name: meta.accessor.js
      begin: >-
        (?x)
          \b(?:(static)\s+)?
          (get|set)\s+
          ([_$a-zA-Z][$\w]*)\s*
          (?=\([^())]*\)(?:\s|/\*.*\*/)*\{)
      beginCaptures:
        '1': {name: storage.type.js}
        '2': {name: storage.type.accessor.js}
        '3': {name: entity.name.accessor.js}
      end: (?<=\))
      patterns:
      - include: '#function-declaration-parameters'

  literal-prototype:
    patterns:
    # e.g. Sound.prototype = {  } when extending an object
    - name: meta.prototype.declaration.js
      match: ([_$a-zA-Z][$\w]*)(\.)(prototype)\s*=\s*
      captures:
        '1': {name: entity.name.class.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: variable.language.prototype.js}

    # e.g. Sound.prototype
    - name: meta.prototype.access.js
      match: ([_$a-zA-Z][$\w]*)(\.)(prototype)\b
      captures:
        '1': {name: entity.name.class.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: variable.language.prototype.js}

  literal-function:
    patterns:
    # e.g. function play(arg1, arg2) {  }
    # e.g. play = function(arg1, arg2) {  }
    - name: meta.function.js
      begin: >-
        (?x)
          (?:([_$a-zA-Z][$\w]*)\s*(=)\s*)?
          (?:(async)\s+)?
          (function)(?:\s*(\*)|(?=[\s(]))
          \s*([_$a-zA-Z][$\w]*)?
      beginCaptures:
        '1': {name: entity.name.function.js}
        '2': {name: keyword.operator.assignment.js}
        '3': {name: storage.type.js}
        '4': {name: storage.type.function.js}
        '5': {name: keyword.generator.asterisk.js}
        '6': {name: entity.name.function.js}
      end: (?<=\))
      patterns:
      - include: '#function-declaration-parameters'

    # e.g. Sound.prototype.play = function(arg1, arg2) {  }
    - name: meta.function.prototype.js
      begin: >-
        (?x)
          (\b_?[A-Z][$\w]*)?
          (\.)(prototype)
          (\.)([_$a-zA-Z][$\w]*)
          \s*=
          \s*(?:(async)\s+)?
          \s*(function)(?:\s*(\*)|(?=\s|[(]))
          \s*([_$a-zA-Z][$\w]*)?\s*
      beginCaptures:
        '1': {name: entity.name.class.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: variable.language.prototype.js}
        '4': {name: keyword.operator.accessor.js}
        '5': {name: entity.name.function.js}
        '6': {name: storage.type.js}
        '7': {name: storage.type.function.js}
        '8': {name: keyword.generator.asterisk.js}
        '9': {name: entity.name.function.js}
      end: (?<=\))
      patterns:
      - include: '#function-declaration-parameters'

    # e.g. Sound.play = function(arg1, arg2) {  }
    - name: meta.function.static.js
      begin: >-
        (?x)
          (\b_?[A-Z][$\w]*)?
          (\.)([_$a-zA-Z][$\w]*)
          \s*=
          \s*(?:(async)\s+)?
          \s*(function)(?:\s*(\*)|(?=\s|[(]))
          \s*([_$a-zA-Z][$\w]*)?\s*
      beginCaptures:
        '1': {name: entity.name.class.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: entity.name.function.js}
        '4': {name: storage.type.js}
        '5': {name: storage.type.function.js}
        '6': {name: keyword.generator.asterisk.js}
        '7': {name: entity.name.function.js}
      end: (?<=\))
      patterns:
      - include: '#function-declaration-parameters'

  literal-function-labels:
    patterns:
    # e.g. play: function(arg1, arg2) {  }
    # e.g. "play": function(arg1, arg2) {  }
    - name: meta.function.json.js
      begin: >-
          (?x)
            (?>
              ((')((?:[^']|\\')*)('))|
              ((")((?:[^"]|\\")*)("))|
              (([_$a-zA-Z][$\w]*|\d+))
            )
            \s*(:)
            \s*(?:\b(async)\s+)?
            \s*(function)(?:\s*(\*)|(?=[\s(]))
            \s*([_$a-zA-Z][$\w]*)?
      beginCaptures:
        '1': {name: string.quoted.js}
        '2': {name: punctuation.definition.string.begin.js}
        '3': {name: entity.name.function.js}
        '4': {name: punctuation.definition.string.end.js}
        '5': {name: string.quoted.js}
        '6': {name: punctuation.definition.string.begin.js}
        '7': {name: entity.name.function.js}
        '8': {name: punctuation.definition.string.end.js}
        '9': {name: string.unquoted.js}
        '10': {name: entity.name.function.js}
        '11': {name: punctuation.separator.key-value.js}
        '12': {name: storage.type.js}
        '13': {name: storage.type.function.js}
        '14': {name: keyword.generator.asterisk.js}
        '15': {name: entity.name.function.js}
      end: (?<=\))
      patterns:
      - include: '#function-declaration-parameters'

  literal-arrow-function:
    patterns:
    # e.g. (args) => { }
    # e.g. play = (args) => { }
    - name: meta.function.arrow.js
      begin: >-
        (?x)
          (?:([_$a-zA-Z][$\w]*)\s*(=)\s*)?
          (?:\b(async)\s+)?
          (?=(\((?:(?>[^()]+)|\g<-1>)*\))\s*(=>))
      beginCaptures:
        '1': {name: entity.name.function.js}
        '2': {name: keyword.operator.assignment.js}
        '3': {name: storage.type.js}
      end: (?<=\))\s*(=>)
      endCaptures:
        '1': {name: storage.type.function.arrow.js}
      patterns:
      - include: '#function-declaration-parameters'

    # e.g. arg => { }
    # e.g. play = arg => { }
    - name: meta.function.arrow.js
      match: >-
        (?x)
          (?:([_$a-zA-Z][$\w]*)\s*(=)\s*)?
          (?:(async)\s+)?
          \b([_$a-zA-Z][$\w]*)\s*(=>)
      captures:
        '1': {name: entity.name.function.js}
        '2': {name: keyword.operator.assignment.js}
        '3': {name: storage.type.js}
        '4': {name: variable.parameter.function.js}
        '5': {name: storage.type.function.arrow.js}

    # e.g. Sound.prototype.play = (args) => { }
    - name: meta.prototype.function.arrow.js
      begin: >-
        (?x)
          (\b_?[A-Z][$\w]*)?
          (\.)(prototype)
          (\.)([_$a-zA-Z][$\w]*)
          \s*=
          \s*(async)?
          \s*(?=\([^()]*\)\s*(=>))
      beginCaptures:
        '1': {name: entity.name.class.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: variable.language.prototype.js}
        '4': {name: keyword.operator.accessor.js}
        '5': {name: entity.name.function.js}
        '6': {name: storage.type.js}
      end: (?<=\))\s*(=>)
      endCaptures:
        '1': {name: storage.type.function.arrow.js}
      patterns:
      - include: '#function-declaration-parameters'

    # e.g. Sound.prototype.play = arg => { }
    - name: meta.prototype.function.arrow.js
      match: >-
        (?x)
          (\b_?[A-Z][$\w]*)?
          (\.)(prototype)
          (\.)([_$a-zA-Z][$\w]*)
          \s*=
          \s*(async)?
          \s*\b([_$a-zA-Z][$\w]*)\s*(=>)
      captures:
        '1': {name: entity.name.class.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: variable.language.prototype.js}
        '4': {name: keyword.operator.accessor.js}
        '5': {name: entity.name.function.js}
        '6': {name: storage.type.js}
        '7': {name: variable.parameter.function.js}
        '8': {name: storage.type.function.arrow.js}

    # e.g. Sound.play = (args) => { }
    - name: meta.function.static.arrow.js
      begin: >-
        (?x)
          (\b_?[A-Z][$\w]*)?
          (\.)([_$a-zA-Z][$\w]*)
          \s*=
          \s*(async)?
          \s*(?=\([^()]*\)\s*(=>))
      beginCaptures:
        '1': {name: entity.name.class.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: entity.name.function.js}
        '4': {name: storage.type.js}
      end: (?<=\))\s*(=>)
      endCaptures:
        '1': {name: storage.type.function.arrow.js}
      patterns:
      - include: '#function-declaration-parameters'

    # e.g. Sound.play = arg => { }
    - name: meta.function.static.arrow.js
      match: >-
        (?x)
          (\b_?[A-Z][$\w]*)?
          (\.)([_$a-zA-Z][$\w]*)
          \s*=
          \s*(async)?
          \s*\b([_$a-zA-Z][$\w]*)\s*(=>)
      captures:
        '1': {name: entity.name.class.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: entity.name.function.js}
        '4': {name: storage.type.js}
        '5': {name: variable.parameter.function.js}
        '6': {name: storage.type.function.arrow.js}

  literal-arrow-function-labels:
    patterns:
    # e.g. play: (args) => { }
    # e.g. "play": (args) => { }
    - name: meta.function.json.arrow.js
      begin: >-
        (?x)
          (?>
            ((')((?:[^']|\\')*)('))|
            ((")((?:[^"]|\\")*)("))|
            (([_$a-zA-Z][$\w]*|\d+))
          )
          \s*(:)
          \s*(?:\b(async)\s+)?
          \s*(?=(\((?:(?>[^()]+)|\g<-1>)*\))\s*(=>))
      beginCaptures:
        '1': {name: string.quoted.js}
        '2': {name: punctuation.definition.string.begin.js}
        '3': {name: entity.name.function.js}
        '4': {name: punctuation.definition.string.end.js}
        '5': {name: string.quoted.js}
        '6': {name: punctuation.definition.string.begin.js}
        '7': {name: entity.name.function.js}
        '8': {name: punctuation.definition.string.end.js}
        '9': {name: string.unquoted.js}
        '10': {name: entity.name.function.js}
        '11': {name: punctuation.separator.key-value.js}
        '12': {name: storage.type.js}
      end: (?<=\))\s*(=>)
      endCaptures:
        '1': {name: storage.type.function.arrow.js}
      patterns:
      - include: '#function-declaration-parameters'

    # e.g. play: arg => { }
    # e.g. "play": arg => { }
    - name: meta.function.json.arrow.js
      match: >-
        (?x)
          (?>
            ((')((?:[^']|\\')*)('))|
            ((")((?:[^"]|\\")*)("))|
            (([_$a-zA-Z][$\w]*|\d+))
          )
          \s*(:)
          \s*(?:\b(async)\s+)?
          \s*\b([_$a-zA-Z][$\w]*)\s*(=>)
      captures:
        '1': {name: string.quoted.js}
        '2': {name: punctuation.definition.string.begin.js}
        '3': {name: entity.name.function.js}
        '4': {name: punctuation.definition.string.end.js}
        '5': {name: string.quoted.js}
        '6': {name: punctuation.definition.string.begin.js}
        '7': {name: entity.name.function.js}
        '8': {name: punctuation.definition.string.end.js}
        '9': {name: string.unquoted.js}
        '10': {name: entity.name.function.js}
        '11': {name: punctuation.separator.key-value.js}
        '12': {name: storage.type.js}
        '13': {name: variable.parameter.function.js}
        '14': {name: storage.type.function.arrow.js}

  literal-function-call:
    patterns:
    - name: meta.function-call.without-arguments.js
      match: >-
        (?x)
          ([_$a-zA-Z][$\w]*)\s*
          (\(\s*\))
      captures:
        '1': {name: variable.function.js}
        '2': {name: meta.group.braces.round.function.arguments.js}

    - name: meta.function-call.with-arguments.js
      match: >-
        (?x)
          ([_$a-zA-Z][$\w]*)\s*
          (?=\()
      captures:
        '1': {name: variable.function.js}

    - name: meta.function-call.tagged-template.js
      match: >-
        (?x)
        ([_$a-zA-Z][$\w]*)\s*
        (?=`)
      captures:
        '1': {name: variable.function.js}

  literal-method-call:
    patterns:
    - name: meta.function-call.static.without-arguments.js
      match: >-
        (?x)
          (?:(?<=\.)|\b)
          ([A-Z][$\w]*)\s*(\.)
          ([_$a-zA-Z][$\w]*)\s*
          (\(\s*\))
      captures:
        '1': {name: variable.other.class.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: variable.function.js}
        '4': {name: meta.group.braces.round.function.arguments.js}

    - name: meta.function-call.static.with-arguments.js
      match: >-
        (?x)
          (?:(?<=\.)|\b)
          ([A-Z][$\w]*)\s*(\.)
          ([_$a-zA-Z][$\w]*)\s*
          (?=\()
      captures:
        '1': {name: variable.other.class.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: variable.function.js}

    - name: meta.function-call.method.without-arguments.js
      match: >-
        (?x)
          (?<=\.)
          ([_$a-zA-Z][$\w]*)\s*
          (\(\s*\))
      captures:
        '1': {name: variable.function.js}
        '2': {name: meta.group.braces.round.function.arguments.js}

    - name: meta.function-call.method.with-arguments.js
      match: >-
        (?x)
          (?<=\.)
          ([_$a-zA-Z][$\w]*)\s*
          (?=\()
      captures:
        '1': {name: variable.function.js}

  literal-language-variable:
    patterns:
    - name: variable.language.arguments.js
      match: (?<!(?<!\.\.)\.)\b(?>arguments)\b

    - name: variable.language.super.js
      match: (?<!(?<!\.\.)\.)\b(?>super)\b

    - name: variable.language.this.js
      match: (?<!(?<!\.\.)\.)\b(?>this)\b

    - name: variable.language.self.js
      match: (?<!(?<!\.\.)\.)\b(?>self)\b

    - name: variable.language.proto.js
      match: (?<=\.)\b(?>__proto__)\b

    - name: variable.language.constructor.js
      match: (?<=\.)\b(?>constructor)\b

    - name: variable.language.prototype.js
      match: (?<=\.)\b(?>prototype)\b

  literal-language-constant:
    patterns:
    - name: constant.language.boolean.true.js
      match: (?<!\.)\b(?>true)\b

    - name: constant.language.boolean.false.js
      match: (?<!\.)\b(>false)\b

    - name: constant.language.null.js
      match: (?<!\.)\b(?>null)\b

    - name: constant.language.undefined.js
      match: (?<!\.)\b(?>undefined)\b

    - name: constant.language.nan.js
      match: (?<!\.)\b(?>NaN)\b

  literal-constructor:
    patterns:
    - name: meta.instance.constructor
      begin: (new)\s+(?=[_$a-zA-Z][$\w.]*)
      beginCaptures:
        '1': {name: keyword.operator.new.js}
      end: (?![_$a-zA-Z][$\w.]*)
      patterns:
      - include: '#support'
      - match: ([_$a-zA-Z][$\w.]*\.)?([_$a-zA-Z][$\w]*)
        captures:
          '2': {name: variable.function.constructor.js}

  literal-keyword-storage:
    patterns:
    - name: storage.type.js
      match: (?<!\.)\b(?>const|let|var)\b

  literal-keywords:
    patterns:
    - include: '#literal-keyword-storage'

    - match: (?<!\.)\b(await|yield)\b(?:\s*(\*))?
      captures:
        '1': {name: keyword.control.flow.js}
        '2': {name: keyword.generator.asterisk.js}

    - name: keyword.control.flow.js
      match: (?<!\.)\b(?>return)\b

    - name: keyword.control.conditional.js
      match: (?<!\.)\b(?>if|else)\b

    - name: keyword.control.trycatch.js
      match: (?<!\.)\b(?>catch|finally|throw|try)\b

    - name: keyword.control.loop.js
      match: (?<!\.)\b(?>break|continue|do|goto|while)\b

    - name: keyword.other.js
      match: (?<!\.)\b(?>debugger)\b

  literal-for:
    patterns:
    - name: meta.for.js
      begin: (?<!\.)\b(for)\b
      beginCaptures:
        '1': {name: keyword.control.loop.js}
      end: \)
      endCaptures:
        '0': {name: meta.brace.round.js}
      patterns:
      - begin: \(
        beginCaptures:
          '0': {name: meta.brace.round.js}
        end: (?=\))
        patterns:
        - include: '#literal-keyword-storage'
        - include: '#expression'
        - include: '#literal-punctuation'

  literal-switch:
    patterns:
    - name: meta.switch.js
      begin: (?<!\.)\b(switch)\b
      beginCaptures:
        '1': {name: keyword.control.switch.js}
      end: \}
      endCaptures:
        '0': {name: meta.brace.curly.js}
      patterns:
      - include: '#round-brackets'
      - begin: \{
        beginCaptures:
          '0': {name: meta.brace.curly.js}
        end: (?=})
        patterns:
        - begin: (?<!\.)\b(case|default)\b
          beginCaptures:
            '1': {name: keyword.control.switch.js}
          end: (?=:)
          patterns:
          - include: '#expression'
        - include: $self

  literal-operators:
    patterns:
    - name: keyword.operator.js
      match: (?<!\.)\b(?>delete|instanceof|in|new|of|typeof|void|with)\b

    - name: keyword.operator.logical.js
      match: >-
        (?x)
          !(?!=)| # logical-not     right-to-left   right
          &&    | # logical-and     left-to-right   both
          \|\|  | # logical-or      left-to-right   both

    - name: keyword.operator.assignment.js
      match: >-
        (?x)
          =(?!=)| # assignment      right-to-left   both

    - name: keyword.operator.assignment.augmented.js
      match: >-
        (?x)
          %=   | # assignment      right-to-left   both
          &=   | # assignment      right-to-left   both
          \*=  | # assignment      right-to-left   both
          \+=  | # assignment      right-to-left   both
          -=   | # assignment      right-to-left   both
          /=   | # assignment      right-to-left   both
          \^=  | # assignment      right-to-left   both
          \|=  | # assignment      right-to-left   both
          <<=  | # assignment      right-to-left   both
          >>=  | # assignment      right-to-left   both
          >>>= | # assignment      right-to-left   both

    - name: keyword.operator.bitwise.js
      match: >-
        (?x)
          ~    | # bitwise-not     right-to-left   right
          <<   | # bitwise-shift   left-to-right   both
          >>>  | # bitwise-shift   left-to-right   both
          >>   | # bitwise-shift   left-to-right   both
          &    | # bitwise-and     left-to-right   both
          \^   | # bitwise-xor     left-to-right   both
          \|     # bitwise-or      left-to-right   both

    - name: keyword.operator.relational.js
      match: >-
        (?x)
          <=   | # relational      left-to-right   both
          >=   | # relational      left-to-right   both
          <    | # relational      left-to-right   both
          >      # relational      left-to-right   both

    - name: keyword.operator.comparison.js
      match: >-
        (?x)
          ===  | # equality        left-to-right   both
          !==  | # equality        left-to-right   both
          ==   | # equality        left-to-right   both
          !=     # equality        left-to-right   both

    - name: keyword.operator.arithmetic.js
      match: >-
        (?x)
          --   | # decrement       n/a             right-or-left
          \+\+ | # increment       n/a             right-or-left
          /    | # division        left-to-right   both
          %    | # modulus         left-to-right   both
          \*   | # multiplication  left-to-right   both
          \+   | # addition        left-to-right   both
          -      # subtraction     left-to-right   both

    - name: keyword.operator.ternary.js
      match: '\?|:'

    - name: keyword.operator.spread.js
      match: (?<!\.)\.\.\.

    - name: keyword.operator.accessor.js
      match: \.

  literal-labels:
    patterns:
    - begin: >-
        (?x)
          (?<!\?)(?<!\?\s)(?=(
            ((')((?:[^']|\\')*)('))|
            ((")((?:[^"]|\\")*)("))
          )\s*:)
      end: ':'
      endCaptures:
        '0': {name: punctuation.separator.key-value.js}
      patterns:
      - include: '#literal-string'

    - name: constant.other.object.key.js
      match: (?<!\.|\?|\?\s)([_$a-zA-Z][$\w]*)\s*(:)
      captures:
        '1': {name: string.unquoted.label.js}
        '2': {name: punctuation.separator.key-value.js}

  literal-number:
    patterns:
    - name: invalid.illegal.numeric.hex.js
      match: (?i)(?:\B[-+]|\b)0x[0-9a-f]*\.(\B|\b[0-9]+)

    - name: invalid.illegal.numeric.octal.js
      match: (?:\B[-+]|\b)0[0-9]+\.(\B|\b[0-9]+)

    - name: constant.numeric.js
      match: >-
        (?xi)
          (?:\B[-+])?
          (?:
            \b0b[0-1]*|                 # binary
            \b0o[0-7]*|                 # octal
            \b0x[0-9a-f]*|              # hex
            (
              \B\.[0-9]+|               # e.g. .999
              \b[0-9]+(\.[0-9]*)?       # e.g. 999.999, 999. or 999
            )(e[-+]?[0-9]+)?            # e.g. e+123, E-123
          )

    - name: constant.language.infinity.js
      match: (?:\B[-+]|\b)(Infinity)\b

  literal-punctuation:
    patterns:
    - name: punctuation.terminator.statement.js
      match: \;

    - name: meta.delimiter.comma.js
      match: ','

  literal-template-string:
    begin: '`'
    end: '`'
    captures:
      '0': {name: string.interpolated.js keyword.other.template.js}
    patterns:
    - include: '#string-content'
    - name: constant.character.escape.js
      match: \\`
    - begin: \${
      end: \}
      captures:
        '0': {name: keyword.other.substitution.js}
      patterns:
      - include: '#expression'
    # Workaround so themes color the contents of template strings as "string",
    # but not any interpolated expression within.
    - name: string.interpolated.js
      match: '.'

  literal-regexp:
    patterns:
    # ignore ++, -- since they're uncommon, distinguishing them is not possible in sublime text, see:
    # http://stackoverflow.com/questions/5519596/when-parsing-javascript-what-determines-the-meaning-of-a-slash
    - name: string.regexp.js
      begin: >-
        (?x)
          (?<=
            \.|\(|,|{|}|\[|;|<|>|<=|>=|==|!=|===|!==|\+|-|\*|%|\+\+|--|<<|>>|>>>|&|\||\^|!|~|&&|\|\||\?|:|=|\+=|-=|\*=|%=|<<=|>>=|>>>=|&=|\|=|\^=|/|/=|
            \Wnew|\Wdelete|\Wvoid|\Wtypeof|\Winstanceof|\Win|\Wdo|\Wreturn|\Wcase|\Wthrow|\Wyield|
            ^new|^delete|^void|^typeof|^instanceof|^in|^do|^return|^case|^throw|^yield|^
          )\s*
          (/)
          (?!/|\*|$)
      beginCaptures:
        '1': {name: punctuation.definition.string.begin.js}
      end: (/)([gimy]*)
      endCaptures:
        '1': {name: punctuation.definition.string.end.js}
        '2': {name: keyword.other.js}
      patterns:
      - include: source.regexp.js

  literal-string:
    patterns:
    - name: string.quoted.js
      begin: (["'])
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.js}
      end: (\1)|(\n)
      endCaptures:
        '1': {name: punctuation.definition.string.end.js}
        '2': {name: invalid.illegal.newline.js}
      patterns:
      - include: '#string-content'

  string-content:
    # https://mathiasbynens.be/notes/javascript-escapes
    patterns:
    - name: constant.character.escape.newline.js
      match: \\\s*\n

    - name: constant.character.escape.js
      match: \\([1-7][0-7]{0,2}|[0-7]{2,3}|[bfnrtv0'"\\]|x\h{2}|u\{\h+\}|u\h{4})

  literal-variable:
    patterns:
    # e.g. CONSTANT
    - name: variable.other.constant.js
      match: '[A-Z][_$\dA-Z]*\b'

    # dollar variables
    - name: variable.other.dollar.js
      match: '(\$)[$\w]+'
      captures:
        '1': {name: punctuation.dollar.js}

    # e.g. Class.property
    - name: meta.property.class.js
      match: >-
        (?x)
          \b([A-Z][$\w]*)\s*(\.)
          ([_$a-zA-Z][$\w]*)
      captures:
        '1': {name: variable.other.class.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: variable.other.property.static.js}

    # e.g. obj.property
    - name: variable.other.object.js
      match: (?<!\.)([_$a-zA-Z][$\w]*)\s*(?=[\[\.])
      captures:
        '1': {name: variable.other.object.js}

    # e.g. obj.property
    - name: meta.property.object.js
      match: (?<=\.)\s*([_$a-zA-Z][$\w]*)
      captures:
        '1': {name: variable.other.property.js}

    - name: variable.other.readwrite.js
      match: '[_$a-zA-Z][$\w]*'

  support:
    patterns:
    # built-ins
    - name: support.class.builtin.js
      match: (?<!\.)\b(Array|ArrayBuffer|Boolean|DataView|Date|Float32Array|Float64Array|Function|Infinity|Int16Array|Int32Array|Int8Array|JSON|Map|Math|NaN|Number|Object|Promise|Proxy|Reflect|RegExp|Set|String|Symbol|System|TypeError|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray|WeakMap|WeakSet)\b

    - name: support.class.error.js
      match: (?<!\.)\b((?>Eval|Range|Reference|Syntax|Type|URI)?Error)\b

    - name: support.class.node.js
      match: \b(?>Buffer)\b

    - name: support.function.builtin.js
      match: (?<!\.)\b(constructor|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|hasOwnProperty|isFinite|isNaN|isPrototypeOf|parseFloat|parseInt|propertyIsEnumerable|toLocaleString|toString|unescape|valueOf)\b

    - name: support.function.node.js
      match: (?<!\.)\b(clearImmediate|clearInterval|clearTimeout|require|setImmediate|setInterval|setTimeout)\b

    - name: support.type.object.dom.js
      match: (?<!\.)\b(?>document|window)\b

    - name: support.type.object.node.js
      match: (?<!\.)\b(?>global|GLOBAL|root|__dirname|__filename)\b

    - match: (?<!\.)\b(console)(?:(\.)(assert|count|dir|error|group|groupCollapsed|groupEnd|info|log|profile|profileEnd|table|time|timeEnd|trace|warn))?\b
      captures:
        '1': {name: support.type.object.console.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: support.function.console.js}

    - match: (?<!\.)\b(process)(?:(\.)(?:(arch|argv|config|env|execArgv|execPath|exitCode|mainModule|pid|platform|stderr|stdin|stdout|title|version|versions)|(abort|chdir|cwd|exit|getgid|getgroups|getuid|hrtime|initgroups|kill|memoryUsage|nextTick|setgid|setgroups|setuid|umask|uptime)))?\b
      captures:
        '1': {name: support.type.object.process.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: support.type.object.process.js}
        '4': {name: support.function.process.js}

    - match: (?<!\.)\b(exports|module(?:(\.)(children|exports|filename|id|loaded|parent)))?\b
      captures:
        '1': {name: support.type.object.module.js}
        '2': {name: keyword.operator.accessor.js}
        '3': {name: support.type.object.module.js}

    # mustache
    - name: meta.tag.mustache.js
      begin: '{{'
      end: '}}'

  literal-jsx:
    contentName: meta.jsx.js
    begin: (?<=\(|\{|\[|,|&&|\|\||\?|:|=|=>|\Wreturn|^return|^)(?=\s*<)
    end: (?<=/>|>)
    patterns:
    - include: '#jsx-tag-start'

  jsx-tag-start:
    patterns:
    - begin: (<)([_$a-zA-Z][-$:.\w]*[$\w]*)
      beginCaptures:
        '1': {name: punctuation.definition.tag.jsx}
        '2': {name: entity.name.tag.jsx}
      end: (</)(\2)(>)|(/>)
      endCaptures:
        '1': {name: punctuation.definition.tag.jsx}
        '2': {name: entity.name.tag.jsx}
        '3': {name: punctuation.definition.tag.jsx}
        '4': {name: punctuation.definition.tag.jsx}
      patterns:
      - include: '#jsx-tag-end'
      - include: '#jsx-attributes'

    - name: invalid.illegal.tag.incomplete.jsx
      match: '<'

  jsx-tag-end:
    begin: '>'
    beginCaptures:
      '0': {name: punctuation.definition.tag.jsx}
    end: (?=</)
    patterns:
    - include: '#jsx-tag-start'
    - include: '#jsx-evaluated-code'
    - include: '#jsx-entities'

  jsx-attributes:
    patterns:
    - include: '#jsx-attribute-name'
    - include: '#jsx-attribute-assignment'
    - include: '#jsx-string-quoted'
    - include: '#jsx-evaluated-code'
    - include: '#comments'

  jsx-attribute-name:
    name: entity.other.attribute-name.jsx
    match: '[_$a-zA-Z][-$\w]*'

  jsx-attribute-assignment:
    name: keyword.operator.assignment.jsx
    match: '='

  jsx-evaluated-code:
    name: meta.embedded.expression.jsx
    begin: '{'
    end: '}'
    captures:
      '0': {name: punctuation.section.embedded.jsx}
    patterns:
    - include: '#expression'

  jsx-string-quoted:
    name: string.quoted.jsx
    begin: (["'])
    end: (\1)
    captures:
      '0': {name: punctuation.definition.string.jsx}
    patterns:
    - include: '#jsx-entities'

  jsx-entities:
    patterns:
    - name: constant.character.entity.jsx
      match: '&(?:[a-zA-Z0-9]+|#\d+|#x\h+);'
    - name: invalid.illegal.bad-ampersand.jsx
      match: '&\S*;'

  # stage 0 proposal: https://gist.github.com/jeffmo/054df782c05639da2adb
  es7-class-properties:
    patterns:
    - match: >-
        (?x)
          \b(static)?
          \s*
          \b([_$a-zA-Z][$\w]*)\s*(=)
      captures:
        '1': {name: storage.type.js}
        '2': {name: variable.other.property.js}
        '3': {name: storage.type.js}

  # https://github.com/wycats/javascript-decorators
  es7-decorators:
    patterns:
    - name: tag.decorator.js
      match: >-
        (?x)
          (@)([_$a-zA-Z][$\w]*)\b
      captures:
        '1': {name: punctuation.definition.tag.js}
        '2': {name: entity.name.tag.js}
