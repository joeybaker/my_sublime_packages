<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>.js</string>
		<string>.jsx</string>
	</array>
	<key>name</key>
	<string>JavaScript (vscode)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#directives</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#statements</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.ts</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\A(#!).*(?=$)</string>
			<key>name</key>
			<string>comment.line.shebang.ts</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>access-modifier</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(abstract|public|protected|private|readonly|static)\b(?!\$)</string>
			<key>name</key>
			<string>storage.modifier.js</string>
		</dict>
		<key>after-operator-block</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[=(,\[?+!]|await|return|yield|throw|in|of|typeof|&amp;&amp;|\|\||\*)\s*(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.objectliteral.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-member</string>
				</dict>
			</array>
		</dict>
		<key>array-binding-pattern</key>
		<dict>
			<key>begin</key>
			<string>(?:(\.\.\.)\s*)?(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.rest.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.array.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.array.js</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#binding-element</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>array-literal</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.array.literal.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>arrow-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.async.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?:(?&lt;!\.|\$)(\basync)\s*)?([_$[:alpha:]][_$[:alnum:]]*)\s*(?==&gt;)</string>
					<key>name</key>
					<string>meta.arrow.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x) (?:
  (?&lt;!\.|\$)(\basync)(?=\s*[&lt;(])
) | ((?&lt;![})\]])\s*
  (?=
    # sure shot arrow functions even if =&gt; is on new line
    (
      [(]\s*
      (
        ([)]\s*:) |                               # ():
        ([_$[:alpha:]][_$[:alnum:]]*\s*:) |       # [(]param:
        (\.\.\.)                                  # [(]...
      )
    ) |
    (
      [&lt;]\s*[_$[:alpha:]][_$[:alnum:]]*\s+extends\s*[^=&gt;] # &lt; typeparam extends
    ) |
    # arrow function possible to detect only with =&gt; on same line
    (
      (&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?                 # typeparameters
      \(([^()]|\([^()]*\))*\)                     # parameteres
      (\s*:\s*(.)*)?                              # return type
      \s*=&gt;                                       # arrow operator
    )
  )
)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.async.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?==&gt;|\{)</string>
					<key>name</key>
					<string>meta.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#arrow-return-type</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>=&gt;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\})|((?!\{)(?=\S))</string>
					<key>name</key>
					<string>meta.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#decl-block</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>arrow-return-type</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\))\s*(:)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.type.annotation.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?==&gt;|\{)</string>
			<key>name</key>
			<string>meta.return.type.arrow.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=:)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.object.type.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-object-members</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-predicate-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>binding-element</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#destructuring-variable-rest</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
			</array>
		</dict>
		<key>boolean-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\btrue\b(?!\$)</string>
					<key>name</key>
					<string>constant.language.boolean.true.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bfalse\b(?!\$)</string>
					<key>name</key>
					<string>constant.language.boolean.false.js</string>
				</dict>
			</array>
		</dict>
		<key>case-clause</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(case|default(?=:))\b(?!\$)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>:</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.section.case-statement.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>case-clause.expr.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>cast</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx</string>
				</dict>
			</array>
		</dict>
		<key>class-or-interface-body</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decorator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#field-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#access-modifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#property-accessor</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#after-operator-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-semicolon</string>
				</dict>
			</array>
		</dict>
		<key>class-or-interface-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(?:(export)\s+)?\b(?:(abstract)\s+)?\b(?:(class)|(interface))\b(?=\s+|/[/*])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.class.js</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.interface.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.class.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-or-interface-heritage</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-or-interface-body</string>
				</dict>
			</array>
		</dict>
		<key>class-or-interface-heritage</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:\b(extends|implements)\b)(?!\$)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\{)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-or-interface-heritage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.module.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)(?=\s*[_$[:alpha:]][_$[:alnum:]]*(\s*\.\s*[_$[:alpha:]][_$[:alnum:]]*)*\s*([,&lt;{]|extends|implements|//|/\*))</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.inherited-class.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)(?=\s*([,&lt;{]|extends|implements|//|/\*))</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.documentation.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#docblock</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=//)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>//</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=$)</string>
							<key>name</key>
							<string>comment.line.double-slash.js</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>control-statement</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(catch|finally|throw|try)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.control.trycatch.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(break|continue|do|goto|while)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.control.loop.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(return)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.control.flow.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(case|default|switch)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.control.switch.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(else|if)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.control.conditional.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(with)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.control.with.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(debugger)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.other.debugger.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(declare)\b(?!\$)</string>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
			</array>
		</dict>
		<key>decl-block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.block.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
		</dict>
		<key>declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#decorator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#var-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-or-interface-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#enum-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#namespace-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-equals-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#export-declaration</string>
				</dict>
			</array>
		</dict>
		<key>decorator</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\@</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.decorator.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\s)</string>
			<key>name</key>
			<string>meta.decorator.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>destructuring-parameter</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|:)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.object.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.object.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.parameter.object-binding-pattern.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parameter-object-binding-element</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|:)\s*(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.array.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.array.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.paramter.array-binding-pattern.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parameter-binding-element</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#punctuation-comma</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>destructuring-parameter-rest</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.rest.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.js</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:(\.\.\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)</string>
		</dict>
		<key>destructuring-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|:|of|in)\s*(?=\{)</string>
					<key>end</key>
					<string>(?=$|[;,=}]|(\s+(of|in)\s+))</string>
					<key>name</key>
					<string>meta.object-binding-pattern-variable.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#object-binding-pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-annotation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|:|of|in)\s*(?=\[)</string>
					<key>end</key>
					<string>(?=$|[;,=}]|(\s+(of|in)\s+))</string>
					<key>name</key>
					<string>meta.array-binding-pattern-variable.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#array-binding-pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#type-annotation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>destructuring-variable-rest</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.rest.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.definition.variable.js variable.other.readwrite.js</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:(\.\.\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)</string>
		</dict>
		<key>directives</key>
		<dict>
			<key>begin</key>
			<string>^(///)\s*(?=&lt;(reference|amd-dependency|amd-module)(\s+(path|types|no-default-lib|name)\s*=\s*((\'[^']*\')|(\"[^"]*\")))+\s*/&gt;\s*$)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$)</string>
			<key>name</key>
			<string>comment.line.triple-slash.directive.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(&lt;)(reference|amd-dependency|amd-module)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.directive.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.directive.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>/&gt;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.directive.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.tag.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>path|types|no-default-lib|name</string>
							<key>name</key>
							<string>entity.other.attribute-name.directive.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>=</string>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>docblock</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)(?&lt;!\w)@(
  abstract|access|alias|arg|argument|async|attribute|augments|author|beta|borrows|bubbes|callback|chainable|class
  |classdesc|code|config|const|constant|constructor|constructs|copyright|default|defaultvalue|define|deprecated|desc
  |description|dict|emits|enum|event|example|exports?|extends|extension|extension_for|extensionfor|external|file
  |fileoverview|final|fires|for|function|global|host|ignore|implements|implicitCast|inherit[Dd]oc|inner|instance
  |interface|kind|lends|license|listens|main|member|memberof|method|mixex|mixins?|modifies|module|name|namespace
  |noalias|nocollapse|nocompile|nosideeffects|override|overview|package|param|preserve|private|prop|property
  |protected|public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary|suppress
  |template|this|throws|todo|type|typedef|unrestricted|uses|var|variation|version|virtual|writeOnce)\b</string>
					<key>name</key>
					<string>storage.type.class.jsdoc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.instance.jsdoc</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.other.description.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.description.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
(
  \[
    [^\]]+            # Optional [link text] preceding {@link syntax}
  \]

  (?!                  # Check to avoid highlighting two sets of link text
    {
      @\w+            # Tagname
      \s+
      [^\s|}]+        # Namepath/URL
      [\s|]           # Whitespace or bar delimiting description
      [^}]*
    }
  )
)?

(?:
  {
    (
      @
      (?: link         # Name of tag
        | linkcode
        | linkplain
        | tutorial
      )
    )

    \s+

    ([^\s|}]+)        # Namepath or URL

    (?:                # Optional link text following link target
      [\s|]           # Bar or space separating target and text
      [^}]*            # Actual text
    )?
  }
)</string>
					<key>name</key>
					<string>other.meta.jsdoc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>other.meta.jsdoc</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.instance.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>other.description.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)

(?:(?&lt;=@param)|(?&lt;=@arg)|(?&lt;=@argument)|(?&lt;=@type)|(?&lt;=@property)|(?&lt;=@prop))

\s+

({(?:
  \* |                                       # {*} any type
  \? |                                       # {?} unknown type

  (?:
    (?:                                       # Check for a prefix
      \? |                                   # {?string} nullable type
      !   |                                   # {!string} non-nullable type
      \.{3}                                  # {...string} variable number of parameters
    )?

    (?:
      (?:
        function                              # {function(string, number)} function type
        \s*
        \(
        \s*
        (?:
          [a-zA-Z_$][\w$]*
          (?:
            \s*,\s*
            [a-zA-Z_$][\w$]*
          )*
        )?
        \s*
        \)
        (?:                                   # {function(): string} function return type
          \s*:\s*
          [a-zA-Z_$][\w$]*
        )?
      )?
      |
      (?:
        \(                                   # Opening bracket of multiple types with parenthesis {(string|number)}
          [a-zA-Z_$]+
          (?:
            (?:
              [\w$]*
              (?:\[\])?                     # {(string[]|number)} type application, an array of strings or a number
            ) |
            \.?&lt;[\w$]+(?:,\s+[\w$]+)*&gt;    # {Array&lt;string&gt;} or {Object&lt;string, number&gt;} type application (optional .)
          )
          (?:
            [\.|~]                           # {Foo.bar} namespaced, {string|number} multiple, {Foo~bar} class-specific callback
            [a-zA-Z_$]+
            (?:
              (?:
                [\w$]*
                (?:\[\])?                   # {(string|number[])} type application, a string or an array of numbers
              ) |
              \.?&lt;[\w$]+(?:,\s+[\w$]+)*&gt;  # {Array&lt;string&gt;} or {Object&lt;string, number&gt;} type application (optional .)
            )
          )*
        \) |
        [a-zA-Z_$]+
        (?:
          (?:
            [\w$]*
            (?:\[\])?                       # {(string|number[])} type application, a string or an array of numbers
          ) |
          \.?&lt;[\w$]+(?:,\s+[\w$]+)*&gt;      # {Array&lt;string&gt;} or {Object&lt;string, number&gt;} type application (optional .)
        )
        (?:
          [\.|~]                             # {Foo.bar} namespaced, {string|number} multiple, {Foo~bar} class-specific callback
          [a-zA-Z_$]+
          (?:
            [\w$]* |
            \.?&lt;[\w$]+(?:,\s+[\w$]+)*&gt;    # {Array&lt;string&gt;} or {Object&lt;string, number&gt;} type application (optional .)
          )
        )*
      )
    )
                                              # Check for suffix
    (?:\[\])?                               # {string[]} type application, an array of strings
    =?                                        # {string=} optional parameter
  )
)})

\s+

(
  \[                                         # [foo] optional parameter
    \s*
    (?:
      [a-zA-Z_$][\w$]*
      (?:
        (?:\[\])?                           # Foo[].bar properties within an array
        \.                                   # Foo.Bar namespaced parameter
        [a-zA-Z_$][\w$]*
      )*
      (?:
        \s*
        =                                     # [foo=bar] Default parameter value
        \s*
        [\w$\s]*
      )?
    )
    \s*
  \] |
  (?:
    [a-zA-Z_$][\w$]*
    (?:
      (?:\[\])?                             # Foo[].bar properties within an array
      \.                                     # Foo.Bar namespaced parameter
      [a-zA-Z_$][\w$]*
    )*
  )?
)

\s+

(?:-\s+)?                                     # optional hyphen before the description

((?:(?!\*\/).)*)                             # The type description</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>other.meta.jsdoc</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.instance.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>other.description.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)

({(?:
  \* |                                       # {*} any type
  \? |                                       # {?} unknown type

  (?:
    (?:                                       # Check for a prefix
      \? |                                   # {?string} nullable type
      !   |                                   # {!string} non-nullable type
      \.{3}                                  # {...string} variable number of parameters
    )?

    (?:
      (?:
        function                              # {function(string, number)} function type
        \s*
        \(
        \s*
        (?:
          [a-zA-Z_$][\w$]*
          (?:
            \s*,\s*
            [a-zA-Z_$][\w$]*
          )*
        )?
        \s*
        \)
        (?:                                   # {function(): string} function return type
          \s*:\s*
          [a-zA-Z_$][\w$]*
        )?
      )?
      |
      (?:
        \(                                   # Opening bracket of multiple types with parenthesis {(string|number)}
          [a-zA-Z_$]+
          (?:
            [\w$]* |
            \.?&lt;[\w$]+(?:,\s+[\w$]+)*&gt;    # {Array&lt;string&gt;} or {Object&lt;string, number&gt;} type application (optional .)
          )
          (?:
            [\.|~]                           # {Foo.bar} namespaced, {string|number} multiple, {Foo~bar} class-specific callback
            [a-zA-Z_$]+
            (?:
              [\w$]* |
              \.?&lt;[\w$]+(?:,\s+[\w$]+)*&gt;  # {Array&lt;string&gt;} or {Object&lt;string, number&gt;} type application (optional .)
            )
          )*
        \) |
        [a-zA-Z_$]+
        (?:
          [\w$]* |
          \.?&lt;[\w$]+(?:,\s+[\w$]+)*&gt;      # {Array&lt;string&gt;} or {Object&lt;string, number&gt;} type application (optional .)
        )
        (?:
          [\.|~]                             # {Foo.bar} namespaced, {string|number} multiple, {Foo~bar} class-specific callback
          [a-zA-Z_$]+
          (?:
            [\w$]* |
            \.?&lt;[\w$]+(?:,\s+[\w$]+)*&gt;    # {Array&lt;string&gt;} or {Object&lt;string, number&gt;} type application (optional .)
          )
        )*
      )
    )
                                              # Check for suffix
    (?:\[\])?                               # {string[]} type application, an array of strings
    =?                                        # {string=} optional parameter
  )
)})

\s+

(?:-\s+)?                                    # optional hyphen before the description

((?:(?!\*\/).)*)                            # The type description</string>
				</dict>
			</array>
		</dict>
		<key>enum-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?(?:\b(const)\s+)?\b(enum)\s+([_$[:alpha:]][_$[:alnum:]]*)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.enum.js</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.enum.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>name</key>
			<string>meta.enum.declaration.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.js</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>variable.other.enummember.js</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=,|\}|$)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#variable-initializer</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?=((\'[^']*\')|(\"[^"]*\")|(\[([^\[\]]|\[[^\[\]]*\])+\])))</string>
							<key>end</key>
							<string>(?=,|\}|$)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#string</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#array-literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#variable-initializer</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#punctuation-comma</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>export-declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.export.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.as.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.namespace.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.module.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(export)\s+(as)\s+(namespace)\s+([_$[:alpha:]][_$[:alnum:]]*)</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)\b(export)(?:(?:\s*(=))|(?:\s+(default)(?=\s+)))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.export.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.control.default.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=;|\bexport\b|\bfunction\b|\bclass\b|\binterface\b|\blet\b|\bvar\b|\bconst\b|\bimport\b|\benum\b|\bnamespace\b|\bmodule\b|\btype\b|\babstract\b|\bdeclare\b|\basync\b|$)</string>
					<key>name</key>
					<string>meta.export.default.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)\b(export)(?!(\s*:)|(\$))\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.export.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=;|\bexport\b|\bfunction\b|\bclass\b|\binterface\b|\blet\b|\bvar\b|\bconst\b|\bimport\b|\benum\b|\bnamespace\b|\bmodule\b|\btype\b|\babstract\b|\bdeclare\b|\basync\b|$)</string>
					<key>name</key>
					<string>meta.export.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#import-export-declaration</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#regex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#template</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-or-interface-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#arrow-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#cast</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ternary-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#new-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support-objects</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#identifiers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-accessor</string>
				</dict>
			</array>
		</dict>
		<key>expression-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(await)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.control.flow.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.flow.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(yield)\b(?!\$)(?:\s*(\*))?</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bdelete\b(?!\$)</string>
					<key>name</key>
					<string>keyword.operator.expression.delete.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bin\b(?!\$)</string>
					<key>name</key>
					<string>keyword.operator.expression.in.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bof\b(?!\$)</string>
					<key>name</key>
					<string>keyword.operator.expression.of.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\binstanceof\b(?!\$)</string>
					<key>name</key>
					<string>keyword.operator.expression.instanceof.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bnew\b(?!\$)</string>
					<key>name</key>
					<string>keyword.operator.new.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#typeof-operator</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bvoid\b(?!\$)</string>
					<key>name</key>
					<string>keyword.operator.expression.void.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)\bas\b(?!\$)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.as.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=$|[;,:})\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>\.\.\.</string>
					<key>name</key>
					<string>keyword.operator.spread.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*=|(?&lt;!\()/=|%=|\+=|\-=</string>
					<key>name</key>
					<string>keyword.operator.assignment.compound.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\&amp;=|\^=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|\|=</string>
					<key>name</key>
					<string>keyword.operator.assignment.compound.bitwise.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;&lt;|&gt;&gt;&gt;|&gt;&gt;</string>
					<key>name</key>
					<string>keyword.operator.bitwise.shift.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>===|!==|==|!=</string>
					<key>name</key>
					<string>keyword.operator.comparison.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;</string>
					<key>name</key>
					<string>keyword.operator.relational.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\!|&amp;&amp;|\|\|</string>
					<key>name</key>
					<string>keyword.operator.logical.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\&amp;|~|\^|\|</string>
					<key>name</key>
					<string>keyword.operator.bitwise.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\=</string>
					<key>name</key>
					<string>keyword.operator.assignment.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>--</string>
					<key>name</key>
					<string>keyword.operator.decrement.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\+\+</string>
					<key>name</key>
					<string>keyword.operator.increment.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%|\*|/|-|\+</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.arithmetic.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=[_$[:alnum:])])\s*(/)(?![/*])</string>
				</dict>
			</array>
		</dict>
		<key>field-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\()(?:(?&lt;!\.|\$)\b(readonly)\s+)?(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'[^']*\')|(\"[^"]*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\?\s*)?(=|:))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\}|;|,|$)|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.field.declaration.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=((?:[_$[:alpha:]][_$[:alnum:]]*)|(?:\'[^']*\')|(?:\"[^"]*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\?\s*)?(=|:))</string>
					<key>end</key>
					<string>(?=[};,=]|$)|(?&lt;=\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-annotation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#array-literal</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=(\?\s*)?\s*
  (=\s*(
    (async\s+) |
    (function\s*[(&lt;]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;) |
    ([(]\s*(([)]\s*:)|([_$[:alpha:]][_$[:alnum:]]*\s*:)|(\.\.\.) )) |
    ([&lt;]\s*[_$[:alpha:]][_$[:alnum:]]*((\s+extends\s*[^=&gt;])|(\s*[,]))) |
    ((&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?\(([^()]|\([^()]*\))*\)(\s*:\s*(.)*)?\s*=&gt;))
  ) |
  (:\s*(
    (&lt;) |
    ([(]\s*(
      ([)]) |
      (\.\.\.) |
      ([_$[:alnum:]]+\s*(
        ([:,?=])|
        ([)]\s*=&gt;)
      ))
    )))
  )
)</string>
							<key>name</key>
							<string>meta.definition.property.js entity.name.function.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[_$[:alpha:]][_$[:alnum:]]*</string>
							<key>name</key>
							<string>meta.definition.property.js variable.object.property.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\?</string>
							<key>name</key>
							<string>keyword.operator.optional.js</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>for-loop</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(for)(?:\s+(await))?\s*(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.loop.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.loop.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.js</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#var-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-semicolon</string>
				</dict>
			</array>
		</dict>
		<key>function-call</key>
		<dict>
			<key>begin</key>
			<string>(?=(([_$[:alpha:]][_$[:alnum:]]*\s*\.\s*)*|(\.\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\s*(&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?\()</string>
			<key>end</key>
			<string>(?&lt;=\))(?!(([_$[:alpha:]][_$[:alnum:]]*\s*\.\s*)*|(\.\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\s*(&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?\()</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support-objects</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-identifiers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-accessor</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>name</key>
					<string>entity.name.function.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\&lt;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.typeparameters.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\&gt;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.typeparameters.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.type.parameters.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#punctuation-comma</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(?:(export)\s+)?(?:(async)\s+)?(function\b)(?:\s*(\*))?(?:(?:\s+|(?&lt;=\*))([_$[:alpha:]][_$[:alnum:]]*))?\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.async.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.js</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.generator.asterisk.js</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>meta.definition.function.js entity.name.function.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|;)|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.function.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
			</array>
		</dict>
		<key>function-expression</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(?:(async)\s+)?(function\b)(?:\s*(\*))?(?:(?:\s+|(?&lt;=\*))([_$[:alpha:]][_$[:alnum:]]*))?\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.async.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.generator.asterisk.js</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>meta.definition.function.js entity.name.function.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>name</key>
			<string>meta.function.expression.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
			</array>
		</dict>
		<key>function-parameters</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parameters.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decorator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#destructuring-parameter</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>punctuation.separator.parameter.js</string>
				</dict>
			</array>
		</dict>
		<key>identifiers</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-identifiers</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)(?:(\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\s*=\s*(
  (async\s+)|(function\s*[(&lt;])|(function\s+)|
  ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)|
  ([(]\s*(([)]\s*:)|([_$[:alpha:]][_$[:alnum:]]*\s*:)|(\.\.\.) )) |
  ([&lt;]\s*[_$[:alpha:]][_$[:alnum:]]*((\s+extends\s*[^=&gt;])|(\s*[,]))) |
  ((&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?\(([^()]|\([^()]*\))*\)(\s*:\s*(.)*)?\s*=&gt;)))</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.constant.property.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\.)\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\.)\s*([_$[:alpha:]][_$[:alnum:]]*)</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>
					<key>name</key>
					<string>variable.other.constant.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
					<key>name</key>
					<string>variable.other.readwrite.js</string>
				</dict>
			</array>
		</dict>
		<key>import-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?\b(import)(?!(\s*:)|(\$))\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=;|$)</string>
			<key>name</key>
			<string>meta.import.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#import-export-declaration</string>
				</dict>
			</array>
		</dict>
		<key>import-equals-declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?\b(import)\s+([_$[:alpha:]][_$[:alnum:]]*)\s*(=)\s*(require)\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.export.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.alias.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.control.require.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.import-equals.external.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?\b(import)\s+([_$[:alpha:]][_$[:alnum:]]*)\s*(=)\s*(?!require\b)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.export.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.alias.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=;|$)</string>
					<key>name</key>
					<string>meta.import-equals.internal.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.type.module.js</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.accessor.js</string>
								</dict>
							</dict>
							<key>match</key>
							<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
							<key>name</key>
							<string>variable.other.readwrite.js</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>import-export-block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.block.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#import-export-clause</string>
				</dict>
			</array>
		</dict>
		<key>import-export-clause</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.default.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.language.import-export-all.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.control.as.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.alias.js</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>(default|*|name) as alias</string>
					<key>match</key>
					<string>(?x) (?: \b(default)\b | (\*) | ([_$[:alpha:]][_$[:alnum:]]*)) \s+
  (as) \s+ (?: (\b default \b | \*) | ([_$[:alpha:]][_$[:alnum:]]*))</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*</string>
					<key>name</key>
					<string>constant.language.import-export-all.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(default)\b</string>
					<key>name</key>
					<string>keyword.control.default.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>name</key>
					<string>variable.other.readwrite.alias.js</string>
				</dict>
			</array>
		</dict>
		<key>import-export-declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-export-block</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bfrom\b</string>
					<key>name</key>
					<string>keyword.control.from.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-export-clause</string>
				</dict>
			</array>
		</dict>
		<key>indexer-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?:(?&lt;!\.|\$)\b(readonly)\s*)?(\[)\s*([_$[:alpha:]][_$[:alnum:]]*)\s*(?=:)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])\s*(\?\s*)?|$</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.optional.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.indexer.declaration.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
			</array>
		</dict>
		<key>indexer-mapped-type-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?:(?&lt;!\.|\$)\b(readonly)\s*)?(\[)\s*([_$[:alpha:]][_$[:alnum:]]*)\s+(in)\s+</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.js</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.expression.in.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])\s*(\?\s*)?|$</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.optional.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.indexer.mappedtype.declaration.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>jsx</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-tag-without-attributes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-tag-in-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-tag-invalid</string>
				</dict>
			</array>
		</dict>
		<key>jsx-child-tag</key>
		<dict>
			<key>begin</key>
			<string>(?x)
  (?=(&lt;)\s*
  ([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))
  (?=\s+(?!\?)|/?&gt;))</string>
			<key>end</key>
			<string>(/&gt;)|(?:(&lt;/)\s*([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))\s*(&gt;))</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.tag.js</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.js</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.js</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-tag</string>
				</dict>
			</array>
		</dict>
		<key>jsx-children</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-tag-without-attributes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-child-tag</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-tag-invalid</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-evaluated-code</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-entities</string>
				</dict>
			</array>
		</dict>
		<key>jsx-entities</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(&amp;)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)</string>
					<key>name</key>
					<string>constant.character.entity.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&amp;</string>
					<key>name</key>
					<string>invalid.illegal.bad-ampersand.js</string>
				</dict>
			</array>
		</dict>
		<key>jsx-evaluated-code</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.embedded.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.embedded.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.embedded.expression.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>jsx-string-double-quoted</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-entities</string>
				</dict>
			</array>
		</dict>
		<key>jsx-string-single-quoted</key>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-entities</string>
				</dict>
			</array>
		</dict>
		<key>jsx-tag</key>
		<dict>
			<key>begin</key>
			<string>(?x)
  (?=(&lt;)\s*
  ([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))
  (?=\s+(?!\?)|/?&gt;))</string>
			<key>end</key>
			<string>(?=(/&gt;)|(?:(&lt;/)\s*([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))\s*(&gt;)))</string>
			<key>name</key>
			<string>meta.tag.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (&lt;)\s*
  ([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))
  (?=\s+(?!\?)|/?&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.begin.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[/]?&gt;)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#jsx-tag-attributes</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#jsx-tag-attributes-illegal</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.js</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.jsx.children.tsx</string>
					<key>end</key>
					<string>(?=&lt;/)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#jsx-children</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>jsx-tag-attribute-assignment</key>
		<dict>
			<key>match</key>
			<string>=(?=\s*(?:'|"|{|/\*|//|\n))</string>
			<key>name</key>
			<string>keyword.operator.assignment.js</string>
		</dict>
		<key>jsx-tag-attribute-name</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.other.attribute-name.js</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
  \s*
  ([_$a-zA-Z][-$\w]*)
  (?=\s|=|/?&gt;|/\*|//)</string>
		</dict>
		<key>jsx-tag-attributes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-tag-attribute-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-tag-attribute-assignment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-string-double-quoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-string-single-quoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-evaluated-code</string>
				</dict>
			</array>
		</dict>
		<key>jsx-tag-attributes-illegal</key>
		<dict>
			<key>match</key>
			<string>\S+</string>
			<key>name</key>
			<string>invalid.illegal.attribute.js</string>
		</dict>
		<key>jsx-tag-in-expression</key>
		<dict>
			<key>begin</key>
			<string>(?x)
  (?&lt;=[({\[,?=&gt;:*]|&amp;&amp;|\|\||\?|\Wreturn|^return|\Wdefault|^)\s*
  (?!(&lt;)\s*([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))\s*(&gt;)) #look ahead is not start of tag without attributes
  (?!&lt;\s*[_$[:alpha:]][_$[:alnum:]]*((\s+extends\s+[^=&gt;])|,)) # look ahead is not type parameter of arrow
  (?=(&lt;)\s*
  ([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))
  (?=\s+(?!\?)|/?&gt;))</string>
			<key>end</key>
			<string>(/&gt;)|(?:(&lt;/)\s*([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))\s*(&gt;))</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.tag.js</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.js</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.js</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-tag</string>
				</dict>
			</array>
		</dict>
		<key>jsx-tag-invalid</key>
		<dict>
			<key>match</key>
			<string>&lt;\s*&gt;</string>
			<key>name</key>
			<string>invalid.illegal.tag.incomplete.js</string>
		</dict>
		<key>jsx-tag-without-attributes</key>
		<dict>
			<key>begin</key>
			<string>(&lt;)\s*([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))\s*(&gt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.js</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.jsx.children.tsx</string>
			<key>end</key>
			<string>(&lt;/)\s*([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))\s*(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.tag.without-attributes.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-children</string>
				</dict>
			</array>
		</dict>
		<key>literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#numeric-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#boolean-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#null-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#undefined-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numericConstant-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#this-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#super-literal</string>
				</dict>
			</array>
		</dict>
		<key>method-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:\b(public|private|protected)\s+)?(?:\b(abstract)\s+)?(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?:(?:\b(?:(new)|(constructor))\b(?!\$|:))|(?:(\*)\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\'[^']*\')|(\"[^"]*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))?\s*[\(\&lt;]))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.async.js</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.property.js</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.new.js</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>keyword.generator.asterisk.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\}|;|,|$)|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.method.declaration.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#method-declaration-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
			</array>
		</dict>
		<key>method-declaration-name</key>
		<dict>
			<key>begin</key>
			<string>(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'[^']*\')|(\"[^"]*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??)\s*[\(\&lt;])</string>
			<key>end</key>
			<string>(?=\(|\&lt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-literal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
					<key>name</key>
					<string>meta.definition.method.js entity.name.function.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\?</string>
					<key>name</key>
					<string>keyword.operator.optional.js</string>
				</dict>
			</array>
		</dict>
		<key>namespace-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?\b(namespace|module)\s+(?=[_$[:alpha:]"'`])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.namespace.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|\{)</string>
			<key>name</key>
			<string>meta.namespace.declaration.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>name</key>
					<string>entity.name.type.module.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-accessor</string>
				</dict>
			</array>
		</dict>
		<key>new-expr</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(new)\b(?!\$)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.new.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\))|(?=[;),}]|$|((?&lt;!\.|\$)\bnew\b(?!\$)))</string>
			<key>name</key>
			<string>new.expr.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-or-interface-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>null-literal</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\bnull\b(?!\$)</string>
			<key>name</key>
			<string>constant.language.null.js</string>
		</dict>
		<key>numeric-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\$)0(x|X)[0-9a-fA-F]+\b(?!\$)</string>
					<key>name</key>
					<string>constant.numeric.hex.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\$)0(b|B)[01]+\b(?!\$)</string>
					<key>name</key>
					<string>constant.numeric.binary.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\$)0(o|O)?[0-7]+\b(?!\$)</string>
					<key>name</key>
					<string>constant.numeric.octal.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.decimal.js</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
(?&lt;!\$)(?:
  (?:\b[0-9]+(\.)[0-9]+[eE][+-]?[0-9]+\b)| # 1.1E+3
  (?:\b[0-9]+(\.)[eE][+-]?[0-9]+\b)|       # 1.E+3
  (?:\B(\.)[0-9]+[eE][+-]?[0-9]+\b)|       # .1E+3
  (?:\b[0-9]+[eE][+-]?[0-9]+\b)|            # 1E+3
  (?:\b[0-9]+(\.)[0-9]+\b)|                # 1.1
  (?:\b[0-9]+(\.)\B)|                      # 1.
  (?:\B(\.)[0-9]+\b)|                      # .1
  (?:\b[0-9]+\b(?!\.))                     # 1
)(?!\$)</string>
				</dict>
			</array>
		</dict>
		<key>numericConstant-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bNaN\b(?!\$)</string>
					<key>name</key>
					<string>constant.language.nan.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bInfinity\b(?!\$)</string>
					<key>name</key>
					<string>constant.language.infinity.js</string>
				</dict>
			</array>
		</dict>
		<key>object-binding-element</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'[^']*\')|(\"[^"]*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))</string>
					<key>end</key>
					<string>(?=,|\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#object-binding-element-propertyName</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#binding-element</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#destructuring-variable-rest</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>object-binding-element-propertyName</key>
		<dict>
			<key>begin</key>
			<string>(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'[^']*\')|(\"[^"]*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))</string>
			<key>end</key>
			<string>(:)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.destructuring.js</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-literal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>name</key>
					<string>variable.object.property.js</string>
				</dict>
			</array>
		</dict>
		<key>object-binding-pattern</key>
		<dict>
			<key>begin</key>
			<string>(?:(\.\.\.)\s*)?(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.rest.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.object.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.object.js</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-binding-element</string>
				</dict>
			</array>
		</dict>
		<key>object-identifiers</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)(?=\s*\.\s*prototype\b(?!\$))</string>
					<key>name</key>
					<string>support.class.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.constant.object.property.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.object.property.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)(\.)\s*(?:
  ([[:upper:]][_$[:digit:][:upper:]]*) |
  ([_$[:alpha:]][_$[:alnum:]]*)
)(?=\s*\.\s*[_$[:alpha:]][_$[:alnum:]]*)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.constant.object.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.object.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)(?:
  ([[:upper:]][_$[:digit:][:upper:]]*) |
  ([_$[:alpha:]][_$[:alnum:]]*)
)(?=\s*\.\s*[_$[:alpha:]][_$[:alnum:]]*)</string>
				</dict>
			</array>
		</dict>
		<key>object-literal</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.objectliteral.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-member</string>
				</dict>
			</array>
		</dict>
		<key>object-literal-method-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?:(\*)\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\'[^']*\')|(\"[^"]*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))?\s*[\(\&lt;])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.async.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.property.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.generator.asterisk.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\}|;|,)|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.method.declaration.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#method-declaration-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-literal-method-overload-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
			</array>
		</dict>
		<key>object-literal-method-overload-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?:(\*)\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\'[^']*\')|(\"[^"]*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))?\s*[\(\&lt;])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.async.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.property.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.generator.asterisk.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\(|\&lt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#method-declaration-name</string>
				</dict>
			</array>
		</dict>
		<key>object-member</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-literal-method-declaration</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=(?:(?:\'[^']*\')|(?:\"[^"]*\")|(?:\[([^\[\]]|\[[^\[\]]*\])+\]))\s*:)</string>
					<key>end</key>
					<string>(?=,|\})</string>
					<key>name</key>
					<string>meta.object.member.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?=(?:(?:\'[^']*\')|(?:\"[^"]*\")|(?:\[([^\[\]]|\[[^\[\]]*\])+\]))\s*:)</string>
							<key>end</key>
							<string>:</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.key-value.js</string>
								</dict>
							</dict>
							<key>name</key>
							<string>meta.object-literal.key.js</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#string</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#array-literal</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\s*(:)(?=\s*(
  (async\s+)|(function\s*[(&lt;])|(function\s+)|
  ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)|
  ([(]\s*(([)]\s*:)|([_$[:alpha:]][_$[:alnum:]]*\s*:)|(\.\.\.) )) |
  ([&lt;]\s*[_$[:alpha:]][_$[:alnum:]]*((\s+extends\s*[^=&gt;])|(\s*[,]))) |
  ((&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?\(([^()]|\([^()]*\))*\)(\s*:\s*(.)*)?\s*=&gt;))))</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.object-literal.key.js</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=,|\})</string>
					<key>name</key>
					<string>meta.object.member.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?:[_$[:alpha:]][_$[:alnum:]]*)\s*(:)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.object-literal.key.js</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=,|\})</string>
					<key>name</key>
					<string>meta.object.member.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\.\.\.</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.spread.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=,|\})</string>
					<key>name</key>
					<string>meta.object.member.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(?=,|\}|$)</string>
					<key>name</key>
					<string>meta.object.member.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>parameter-array-binding-pattern</key>
		<dict>
			<key>begin</key>
			<string>(?:(\.\.\.)\s*)?(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.rest.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.array.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.array.js</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-binding-element</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>parameter-binding-element</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-object-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-array-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#destructuring-parameter-rest</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
			</array>
		</dict>
		<key>parameter-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\s*\b(public|protected|private|readonly)(?=\s+(public|protected|private|readonly)\s+)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.rest.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.optional.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)(?:\s*\b(public|private|protected|readonly)\s+)?(\.\.\.)?\s*(?&lt;!=|:)([_$[:alpha:]][_$[:alnum:]]*)\s*(\??)(?=\s*
  (=\s*(
    (async\s+) |
    (function\s*[(&lt;]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;) |
    ([(]\s*(([)]\s*:)|([_$[:alpha:]][_$[:alnum:]]*\s*:)|(\.\.\.) )) |
    ([&lt;]\s*[_$[:alpha:]][_$[:alnum:]]*((\s+extends\s*[^=&gt;])|(\s*[,]))) |
    ((&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?\(([^()]|\([^()]*\))*\)(\s*:\s*(.)*)?\s*=&gt;))
  ) |
  (:\s*(
    (&lt;) |
    ([(]\s*(
      ([)]) |
      (\.\.\.) |
      ([_$[:alnum:]]+\s*(
        ([:,?=])|
        ([)]\s*=&gt;)
      ))
    )))
  )
)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.rest.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.optional.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?:\s*\b(public|private|protected|readonly)\s+)?(\.\.\.)?\s*(?&lt;!=|:)([_$[:alpha:]][_$[:alnum:]]*)\s*(\??)</string>
				</dict>
			</array>
		</dict>
		<key>parameter-object-binding-element</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\'[^']*\')|(\"[^"]*\")|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))</string>
					<key>end</key>
					<string>(?=,|\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#object-binding-element-propertyName</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#parameter-binding-element</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-object-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#destructuring-parameter-rest</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>parameter-object-binding-pattern</key>
		<dict>
			<key>begin</key>
			<string>(?:(\.\.\.)\s*)?(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.rest.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.object.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.object.js</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-object-binding-element</string>
				</dict>
			</array>
		</dict>
		<key>paren-expression</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.js</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>property-accessor</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(get|set)\b(?!\$)</string>
			<key>name</key>
			<string>storage.type.property.js</string>
		</dict>
		<key>punctuation-accessor</key>
		<dict>
			<key>match</key>
			<string>\.</string>
			<key>name</key>
			<string>punctuation.accessor.js</string>
		</dict>
		<key>punctuation-comma</key>
		<dict>
			<key>match</key>
			<string>,</string>
			<key>name</key>
			<string>punctuation.separator.comma.js</string>
		</dict>
		<key>punctuation-semicolon</key>
		<dict>
			<key>match</key>
			<string>;</string>
			<key>name</key>
			<string>punctuation.terminator.statement.js</string>
		</dict>
		<key>qstring-double</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(")|((?:[^\\\n])$)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>qstring-single</key>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\')|((?:[^\\\n])$)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>regex</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=[=(:,\[?+!]|return|case|=&gt;|&amp;&amp;|\|\||\*\/)\s*(/)(?![/*])(?=(?:[^/\\\[]|\\.|\[([^\]\\]|\\.)+\])+/(?![/*])[gimy]*(?!\s*[a-zA-Z0-9_$]))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(/)([gimuy]*)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;![_$[:alnum:]])/(?![/*])(?=(?:[^/\\\[]|\\.|\[([^\]\\]|\\.)+\])+/(?![/*])[gimy]*(?!\s*[a-zA-Z0-9_$]))</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(/)([gimuy]*)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>regex-character-class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[wWsSdDtrnvf]|\.</string>
					<key>name</key>
					<string>constant.other.character-class.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\([0-7]{3}|x\h\h|u\h\h\h\h)</string>
					<key>name</key>
					<string>constant.character.numeric.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\c[A-Z]</string>
					<key>name</key>
					<string>constant.character.control.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.backslash.regexp</string>
				</dict>
			</array>
		</dict>
		<key>regexp</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[bB]|\^|\$</string>
					<key>name</key>
					<string>keyword.control.anchor.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\[1-9]\d*</string>
					<key>name</key>
					<string>keyword.other.back-reference.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[?+*]|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??</string>
					<key>name</key>
					<string>keyword.operator.quantifier.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\|</string>
					<key>name</key>
					<string>keyword.operator.or.regexp</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()((\?=)|(\?!))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.assertion.regexp</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.assertion.look-ahead.regexp</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.assertion.negative-look-ahead.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.assertion.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\((\?:)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.capture.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)(\^)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regexp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.negation.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>constant.other.character-class.set.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>constant.character.numeric.regexp</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>constant.character.control.regexp</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regexp</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>constant.character.numeric.regexp</string>
								</dict>
								<key>5</key>
								<dict>
									<key>name</key>
									<string>constant.character.control.regexp</string>
								</dict>
								<key>6</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regexp</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?:.|(\\(?:[0-7]{3}|x\h\h|u\h\h\h\h))|(\\c[A-Z])|(\\.))\-(?:[^\]\\]|(\\(?:[0-7]{3}|x\h\h|u\h\h\h\h))|(\\c[A-Z])|(\\.))</string>
							<key>name</key>
							<string>constant.other.character-class.range.regexp</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#regex-character-class</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#regex-character-class</string>
				</dict>
			</array>
		</dict>
		<key>return-type</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\))\s*(:)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.type.annotation.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;!:)((?=$)|(?=[{};,]|//))</string>
			<key>name</key>
			<string>meta.return.type.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=:)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.object.type.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-object-members</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-predicate-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>statements</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#template</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#switch-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#for-loop</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#after-operator-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#control-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-semicolon</string>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#qstring-single</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#qstring-double</string>
				</dict>
			</array>
		</dict>
		<key>string-character-escape</key>
		<dict>
			<key>match</key>
			<string>\\(x\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)</string>
			<key>name</key>
			<string>constant.character.escape.js</string>
		</dict>
		<key>super-literal</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\bsuper\b(?!\$)</string>
			<key>name</key>
			<string>variable.language.super.js</string>
		</dict>
		<key>support-objects</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(arguments)\b(?!\$)</string>
					<key>name</key>
					<string>variable.language.arguments.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)(?&lt;!\.|\$)\b(Array|ArrayBuffer|Atomics|Boolean|DataView|Date|Float32Array|Float64Array|Function|Generator
  |GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Promise|Proxy
  |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray
  |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.builtin.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.error.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)(?&lt;!\.|\$)\b(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|
  isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\s*\() </string>
					<key>name</key>
					<string>support.function.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.math.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.math.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>support.constant.property.math.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)(?&lt;!\.|\$)\b(Math)(?:\s*(\.)\s*(?:
  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|
  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|
  round|sign|sin|sinh|sqrt|tan|tanh|trunc)
  |
  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\b(?!\$)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.class.console.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.console.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)(?&lt;!\.|\$)\b(console)(?:\s*(\.)\s*(
  assert|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log
  |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\b(?!\$)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.constant.json.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.json.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(JSON)(?:\s*(\.)\s*(parse|stringify))?\b(?!\$)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.variable.property.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.constant.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x) (\.) \s* (?:
  (constructor|length|prototype|__proto__)
  |
  (EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY))\b(?!\$)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.variable.dom.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.class.dom.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x) (?&lt;!\.|\$) \b (?:
  (document|event|navigator|performance|screen|window)
  |
  (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener
  |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule
  |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration
  |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern
  |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent
  |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException
  |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer
  |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry
  |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent
  |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential
  |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync
  |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement
  |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement
  |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement
  |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement
  |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement
  |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement
  |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement
  |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement
  |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement
  |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement
  |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement
  |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase
  |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction
  |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities
  |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess
  |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent
  |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream
  |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent
  |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID
  |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification
  |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential
  |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark
  |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList
  |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent
  |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList
  |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager
  |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource
  |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement
  |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength
  |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio
  |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement
  |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement
  |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement
  |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength
  |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement
  |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio
  |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList
  |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement
  |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement
  |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState
  |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet
  |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable
  |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer
  |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat
  |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES
  |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope
  |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult
  |XSLTProcessor))\b(?!\$)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.constant.dom.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.variable.property.dom.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x) (\.) \s* (?:
  (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE
  |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR
  |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR
  |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)
  |
  (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName
  |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop
  |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor
  |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption
  |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear
  |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete
  |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset
  |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight
  |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds
  |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize
  |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host
  |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth
  |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext
  |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom
  |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple
  |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName
  |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight
  |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer
  |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling
  |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText
  |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts
  |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove
  |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary
  |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead
  |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile
  |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex))\b(?!\$|\s*(&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?\()</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)(?&lt;!\.|\$)\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream
  |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b(?!\$)</string>
					<key>name</key>
					<string>support.class.node.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.variable.object.process.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.variable.property.process.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>support.function.process.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)(?&lt;!\.|\$)\b(process)(?:(\.)(?:
  (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)
  |
  (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)
))?\b(?!\$)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.object.module.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.type.object.module.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>support.type.object.module.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(?:(exports)|(module)(?:(\.)(exports|id|filename|loaded|parent|children))?)\b(?!\$)</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(global|GLOBAL|root|__dirname|__filename)\b(?!\$)</string>
					<key>name</key>
					<string>support.variable.object.node.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.event-handler.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>support.function.dom.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x) (\.) \s*
(?:
 (on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|
   Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|
   Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|
   Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|
   Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|
   Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|
   Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|
   Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)
 ) |
 (shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|
   scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|
   sup|sub|substr|substring|splice|split|send|set(?:Milliseconds|Seconds|Minutes|Hours|
   Month|Year|FullYear|Date|UTC(?:Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|
   Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|
   savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|
   contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|
   createEventObject|to(?:GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|
   test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|
   untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|
   print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|
   fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|
   forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|
   abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|
   releaseCapture|releaseEvents|go|get(?:Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|
   Time|Date|TimezoneOffset|UTC(?:Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|
   Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|
   moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back
 ) |
 (acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|
   appendChild|appendData|before|blur|canPlayType|captureStream|
   caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|
   cloneContents|cloneNode|cloneRange|close|closest|collapse|
   compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|
   convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|
   createAttributeNS|createCaption|createCDATASection|createComment|
   createContextualFragment|createDocument|createDocumentFragment|
   createDocumentType|createElement|createElementNS|createEntityReference|
   createEvent|createExpression|createHTMLDocument|createNodeIterator|
   createNSResolver|createProcessingInstruction|createRange|createShadowRoot|
   createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|
   deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|
   deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|
   enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|
   exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|
   getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|
   getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|
   getClientRects|getContext|getDestinationInsertionPoints|getElementById|
   getElementsByClassName|getElementsByName|getElementsByTagName|
   getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|
   getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|
   hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|
   insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|
   insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|
   isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|
   lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|
   moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|
   parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|
   previousSibling|probablySupportsContext|queryCommandEnabled|
   queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|
   querySelector|querySelectorAll|registerContentHandler|registerElement|
   registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|
   removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|
   removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|
   requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|
   scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|
   setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|
   setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|
   setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|
   slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|
   submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|
   toDataURL|toggle|toString|values|write|writeln
 )
)(?=\s*\()</string>
				</dict>
			</array>
		</dict>
		<key>switch-block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\})</string>
			<key>name</key>
			<string>switch-block.expr.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#case-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
		</dict>
		<key>switch-expression</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(switch)\s*(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>switch-expression.expr.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>switch-statement</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?=\bswitch\s*\()</string>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>switch-statement.expr.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#switch-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#switch-block</string>
				</dict>
			</array>
		</dict>
		<key>template</key>
		<dict>
			<key>begin</key>
			<string>([_$[:alpha:]][_$[:alnum:]]*)?(`)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.tagged-template.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.template.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>`</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.template.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.template.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#template-substitution-element</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>template-substitution-element</key>
		<dict>
			<key>begin</key>
			<string>\$\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.template-expression.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.template-expression.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.template.expression.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>ternary-expression</key>
		<dict>
			<key>begin</key>
			<string>(\?)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.ternary.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(:)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.ternary.js</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>this-literal</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\bthis\b(?!\$)</string>
			<key>name</key>
			<string>variable.language.this.js</string>
		</dict>
		<key>type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numeric-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-primitive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-builtin-literals</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-tuple</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-object</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-fn-type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-paren-or-function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-function-return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-name</string>
				</dict>
			</array>
		</dict>
		<key>type-annotation</key>
		<dict>
			<key>begin</key>
			<string>:</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.type.annotation.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|[,);\}\]]|//)|(?==[^&gt;])|(?&lt;=[\}&gt;\]\)]|[_$[:alpha:]])\s*(?=\{)</string>
			<key>name</key>
			<string>meta.type.annotation.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>type-builtin-literals</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(this|true|false|undefined|null|object)\b(?!\$)</string>
			<key>name</key>
			<string>support.type.builtin.js</string>
		</dict>
		<key>type-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?\b(type)\b\s+([_$[:alpha:]][_$[:alnum:]]*)\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.type.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=[};]|\bvar\b|\blet\b|\bconst\b|\btype\b|\bfunction\b|\bclass\b|\binterface\b|\bnamespace\b|\bmodule\b|\bimport\b|\benum\b|\bdeclare\b|\bexport\b|\babstract\b|\basync\b)</string>
			<key>name</key>
			<string>meta.type.declaration.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(=)\s*</string>
				</dict>
			</array>
		</dict>
		<key>type-fn-type-parameters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.new.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(new)\b(?=\s*\&lt;)</string>
					<key>name</key>
					<string>meta.type.constructor.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)\b(new)\b\s*(?=\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.new.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.type.constructor.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)(
  (?=
    [(]\s*(
      ([)]) |
      (\.\.\.) |
      ([_$[:alnum:]]+\s*(
        ([:,?=])|
        ([)]\s*=&gt;)
      ))
    )
  )
)</string>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.type.function.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>type-function-return-type</key>
		<dict>
			<key>begin</key>
			<string>=&gt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.arrow.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;!=&gt;)(?=[,\]\)\{\}=;&gt;]|//|$)</string>
			<key>name</key>
			<string>meta.type.function.return.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;==&gt;)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.object.type.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-object-members</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-predicate-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>type-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.module.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
					<key>name</key>
					<string>entity.name.type.js</string>
				</dict>
			</array>
		</dict>
		<key>type-object</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.object.type.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-object-members</string>
				</dict>
			</array>
		</dict>
		<key>type-object-members</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-mapped-type-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#field-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\.\.\.</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.spread.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\}|;|,|$)|(?&lt;=\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-semicolon</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>type-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#typeof-operator</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[&amp;|]</string>
					<key>name</key>
					<string>keyword.operator.type.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bkeyof\b(?!\$)</string>
					<key>name</key>
					<string>keyword.operator.expression.keyof.js</string>
				</dict>
			</array>
		</dict>
		<key>type-parameters</key>
		<dict>
			<key>begin</key>
			<string>(&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.typeparameters.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$)|(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.typeparameters.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.parameters.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(extends)\b(?!\$)</string>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\=(?!&gt;)</string>
					<key>name</key>
					<string>keyword.operator.assignment.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>type-paren-or-function-parameters</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.paren.cover.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
			</array>
		</dict>
		<key>type-predicate-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\bis\b(?!\$)</string>
			<key>name</key>
			<string>keyword.operator.expression.is.js</string>
		</dict>
		<key>type-primitive</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(string|number|boolean|symbol|any|void|never)\b(?!\$)</string>
			<key>name</key>
			<string>support.type.primitive.js</string>
		</dict>
		<key>type-tuple</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.tuple.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>typeof-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\btypeof\b(?!\$)</string>
			<key>name</key>
			<string>keyword.operator.expression.typeof.js</string>
		</dict>
		<key>undefined-literal</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\bundefined\b(?!\$)</string>
			<key>name</key>
			<string>constant.language.undefined.js</string>
		</dict>
		<key>var-expr</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?\b(var|let|const(?!\s+enum\b))\b(?!\$)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|;|}|(\s+(of|in)\s+))</string>
			<key>name</key>
			<string>meta.var.expr.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#destructuring-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#var-single-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation-comma</string>
				</dict>
			</array>
		</dict>
		<key>var-single-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\s*
  (=\s*(
    (async\s+) |
    (function\s*[(&lt;]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;) |
    ([(]\s*(([)]\s*:)|([_$[:alpha:]][_$[:alnum:]]*\s*:)|(\.\.\.) )) |
    ([&lt;]\s*[_$[:alpha:]][_$[:alnum:]]*((\s+extends\s*[^=&gt;])|(\s*[,]))) |
    ((&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+&gt;\s*)?\(([^()]|\([^()]*\))*\)(\s*:\s*(.)*)?\s*=&gt;))
  ) |
  (:\s*(
    (&lt;) |
    ([(]\s*(
      ([)]) |
      (\.\.\.) |
      ([_$[:alnum:]]+\s*(
        ([:,?=])|
        ([)]\s*=&gt;)
      ))
    )))
  )
)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.definition.variable.js entity.name.function.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=$|[;,=}]|(\s+(of|in)\s+))</string>
					<key>name</key>
					<string>meta.var-single-variable.expr.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#var-single-variable-type-annotation</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.definition.variable.js variable.other.constant.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=$|[;,=}]|(\s+(of|in)\s+))</string>
					<key>name</key>
					<string>meta.var-single-variable.expr.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#var-single-variable-type-annotation</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.definition.variable.js variable.other.readwrite.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=$|[;,=}]|(\s+(of|in)\s+))</string>
					<key>name</key>
					<string>meta.var-single-variable.expr.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#var-single-variable-type-annotation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>var-single-variable-type-annotation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>variable-initializer</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|!)(=)(?!=)(?=\s*\S)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=$|[,);}\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|!)(=)(?!=)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[,);}\]])|(?=^\s*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.js</string>
	<key>uuid</key>
	<string>805375ec-d614-41f5-8993-5843fe63ea82</string>
	<key>version</key>
	<string>https://github.com/Microsoft/TypeScript-TmLanguage/commit/5c16c3ce4ede362f39fca054d7b25d85b25ecc68</string>
</dict>
</plist>
